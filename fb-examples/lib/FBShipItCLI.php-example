<?hh // strict
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
namespace Facebook\ShipIt;

type FBShipItCLIStaticConfig = shape(
  'internalRepo' => string,
  'githubOrg' => string,
  'githubProject' => string,
  'sourceRoots' => ImmSet<string>,
  'destDirName' => ?string, // defaults to githubProject
);

/** Base class for projects that have no special requirements.
 *
 * If you need more flexibility than this provides, use the classes
 * directly (eg shipit_hhvm.php and shipit_buck.php)
 */
abstract class FBShipItCLI {
  protected abstract static function getStaticConfig(): FBShipItCLIStaticConfig;
  protected abstract static function projectFilterChangeset(
    ShipItChangeset $changeset
  ): ShipItChangeset;

  // Public so that you can add a unit test
  final public static function filterChangeset(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    return $changeset
      |> self::stripExceptSourceRoots($$)
      |> static::projectFilterChangeset($$)
      |> FBConfidentialFilter::applyAll($$);
  }

  protected static function getBaseConfig(): ShipItBaseConfig {
    $static_config = static::getStaticConfig();
    return new ShipItBaseConfig(
      '/var/tmp/oss_sync_and_push',
      /* source_dir = */ $static_config['internalRepo'],
      Shapes::idx(
        $static_config,
        'destDirName',
        $static_config['githubProject'],
      ),
    );
  }

  final protected static function stripExceptSourceRoots(
    ShipItChangeset $changeset,
  ): ShipItChangeset {
    $roots = static::getStaticConfig()['sourceRoots']
      ->filter($root ==> $root !== '');
    if (count($roots) === 0) {
      return $changeset;
    }

    return ShipItPathFilters::stripExceptDirectories(
      $changeset,
      $roots,
    );
  }

  protected static function getPhases(): ImmVector<ShipItPhase> {
    $static_config = static::getStaticConfig();
    $config = static::getBaseConfig();

    $credentials = FBGitHubUtils::getCredentialsForProject(
      $static_config['githubOrg'],
      $static_config['githubProject'],
    );

    return ImmVector {
      new ShipItFilterSanityCheckPhase(
        $changeset ==> self::filterChangeset($changeset),
        $static_config['sourceRoots'],
      ),
      new FBRepoInitPhase(
        ShipItRepoSide::SOURCE,
        $static_config['internalRepo'],
      ),
      new ShipItPullPhase(ShipItRepoSide::SOURCE),
      new ShipItCreateNewRepoPhase(
        $static_config['sourceRoots'],
        $changeset ==> self::filterChangeset($changeset),
        $credentials,
      ),
      new ShipItGitHubInitPhase(
        $static_config['githubOrg'],
        $static_config['githubProject'],
        ShipItRepoSide::DESTINATION,
        FBGitHubUtils::class,
      ),
      new ShipItPullPhase(ShipItRepoSide::DESTINATION),
      new ShipItSyncPhase(
        ($config, $changeset) ==> self::filterChangeset($changeset),
        $static_config['sourceRoots'],
      ),
      new ShipItVerifyRepoPhase(
        $static_config['sourceRoots'],
        $changeset ==> self::filterChangeset($changeset),
      ),
      new ShipItPushPhase(),
    };
  }

  final public static function cliMain(): void {
    print('--- Starting '.static::class."\n");
    $config = static::getBaseConfig();

    (new ShipItPhaseRunner($config, static::getPhases()))->run();
  }
}
